---
import ethereumSvg from '../assets/crypto/ethereum.svg?raw';
import bitcoinSvg from '../assets/crypto/bitcoin.svg?raw';
import dogecoinSvg from '../assets/crypto/dogecoin.svg?raw';

interface Props {
  currency: 'ETH' | 'BTC' | 'DOGE';
  address: string;
}

const { currency, address } = Astro.props;

const currencyData = {
  ETH: {
    name: 'Ethereum',
    icon: ethereumSvg,
    color: 'text-[#627EEA]',
  },
  BTC: {
    name: 'Bitcoin', 
    icon: bitcoinSvg,
    color: 'text-[#F7931A]',
  },
  DOGE: {
    name: 'Dogecoin',
    icon: dogecoinSvg,
    color: 'text-[#C2A633]',
  },
};

const data = currencyData[currency];
const truncatedAddress = `${address.slice(0, 6)}...${address.slice(-4)}`;
---

<div class="crypto-wallet relative" data-currency={currency} data-address={address}>
  <button
    class={`crypto-button flex items-center space-x-2 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-800 hover:border-gray-300 dark:hover:border-gray-700 transition-all duration-200 min-w-0`}
    type="button"
    aria-label={`${data.name} wallet address`}
    title={address}
  >
    <span class={`crypto-icon w-4 h-4 flex items-center justify-center ${data.color}`} set:html={data.icon} />
    <span class="text-xs font-medium text-gray-600 dark:text-gray-400">{data.name}</span>
  </button>

  <div
    class="qr-popup absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 opacity-0 pointer-events-none transition-all duration-200 z-50 hidden"
  >
    <div
      class="bg-white dark:bg-gray-900 rounded-lg shadow-xl border border-gray-200 dark:border-gray-800 p-4"
    >
      <canvas class="qr-code w-40 h-40 bg-white rounded" data-address={address}></canvas>
      <p
        class="popup-address text-xs text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 mt-2 text-center font-mono break-all max-w-[160px] cursor-pointer transition-colors"
      >
        {address}
      </p>
    </div>
    <div
      class="absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-transparent border-t-white dark:border-t-gray-900"
    >
    </div>
  </div>

  <div
    class="copy-feedback fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 pointer-events-none transform translate-y-2 transition-all duration-300"
  >
    <div class="flex items-center space-x-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"
        ></path>
      </svg>
      <span class="text-sm font-medium">Copied!</span>
    </div>
  </div>
</div>

<script>
  import QRCode from 'qrcode';

  document.addEventListener('DOMContentLoaded', () => {
    const wallets = document.querySelectorAll('.crypto-wallet');

    // Close all popups when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.crypto-wallet')) {
        document.querySelectorAll('.qr-popup').forEach((popup) => {
          popup.classList.remove('popup-visible');
          setTimeout(() => {
            popup.classList.add('hidden');
          }, 200);
        });
      }
    });

    wallets.forEach((wallet) => {
      const address = wallet.getAttribute('data-address');
      const button = wallet.querySelector('.crypto-button');
      const qrContainer = wallet.querySelector('.qr-code');
      const feedback = wallet.querySelector('.copy-feedback');

      // Generate QR code
      if (qrContainer && address) {
        QRCode.toCanvas(qrContainer, address, {
          width: 160,
          margin: 1,
          color: {
            dark: '#000000',
            light: '#FFFFFF',
          },
        });
      }

      // Toggle popup on button click
      button?.addEventListener('click', (e) => {
        e.stopPropagation();
        const popup = wallet.querySelector('.qr-popup');

        if (popup?.classList.contains('popup-visible')) {
          // If popup is already visible, copy address instead
          navigator.clipboard
            .writeText(address || '')
            .then(() => {
              // Show feedback
              feedback?.classList.remove('opacity-0', 'pointer-events-none', 'translate-y-2');
              feedback?.classList.add('opacity-100', 'translate-y-0');

              // Hide feedback after 2 seconds
              setTimeout(() => {
                feedback?.classList.add('opacity-0', 'pointer-events-none', 'translate-y-2');
                feedback?.classList.remove('opacity-100', 'translate-y-0');
              }, 2000);
            })
            .catch((err) => {
              console.error('Failed to copy:', err);
            });
        } else {
          // Close other popups first
          document.querySelectorAll('.qr-popup').forEach((otherPopup) => {
            if (otherPopup !== popup) {
              otherPopup.classList.remove('popup-visible');
              setTimeout(() => {
                otherPopup.classList.add('hidden');
              }, 200);
            }
          });

          // Show this popup
          popup?.classList.remove('hidden');
          setTimeout(() => {
            popup?.classList.add('popup-visible');
          }, 10);
        }
      });

      // Add click handler to address text in popup
      const popupAddress = wallet.querySelector('.popup-address');
      popupAddress?.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(address || '');

          // Show feedback
          feedback?.classList.remove('opacity-0', 'pointer-events-none', 'translate-y-2');
          feedback?.classList.add('opacity-100', 'translate-y-0');

          // Hide feedback after 2 seconds
          setTimeout(() => {
            feedback?.classList.add('opacity-0', 'pointer-events-none', 'translate-y-2');
            feedback?.classList.remove('opacity-100', 'translate-y-0');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    });
  });
</script>

<style>
  .crypto-wallet {
    position: relative;
  }

  .crypto-icon :global(svg) {
    width: 100%;
    height: 100%;
    fill: currentColor;
  }

  .qr-popup {
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  /* Show popup when it has the popup-visible class */
  .qr-popup.popup-visible {
    opacity: 1;
    pointer-events: auto;
    transform: translateX(-50%) translateY(-4px);
  }

  @media (max-width: 640px) {
    .qr-popup {
      left: 50%;
      right: auto;
      transform: translateX(-50%);
    }

    .qr-popup.popup-visible {
      transform: translateX(-50%) translateY(-4px);
    }
  }
</style>
