---
interface Props {
  currency: 'ETH' | 'BTC' | 'DOGE';
  address: string;
}

const { currency, address } = Astro.props;

const currencyData = {
  ETH: {
    name: 'Ethereum',
    icon: `<svg viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
      <path d="M11.944 17.97L4.58 13.62 11.943 24l7.37-10.38-7.372 4.35h.003zM12.056 0L4.69 12.223l7.365 4.354 7.365-4.35L12.056 0z"/>
    </svg>`,
    color: 'text-gray-600 dark:text-gray-400',
  },
  BTC: {
    name: 'Bitcoin',
    icon: `<svg viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
      <path d="M12.48 6.678v-3.59l-1.84.423v3.167h1.84zm3.037-.496v3.078c.034.454-.052.783-.258 1.002-.177.187-.485.304-.871.33v-4.964c.92.077 1.115.417 1.124.554h.005zm-1.124 6.078c1.004.086 1.458.565 1.363 1.428-.054.531-.325.813-.81.85-.144.012-.294.005-.44-.004V10.23l.008.003c-.04 0-.08-.003-.12-.003v.03zm-3.753-9.172v3.59h2.33V2.511l-2.33.537v.04zm0 4.59v3.89h2.33v-3.89h-2.33zm5.96 2.552h1.84c0-1.68-.768-2.745-2.1-3.01V4.106l2.369-.546V24l-2.37-3.333v-6.133c1.225-.268 2.097-1.31 2.1-2.862v-.063c-.003-1.35-.667-2.38-1.84-2.754v-1.82c1.07.234 1.862 1.103 1.933 2.333h1.838c-.067-2.2-1.497-3.61-3.77-3.878V2.25L20 1.5v20.385l-5.377-7.56v-.095zm-5.962 2.244v4.06l1.839-.002c.02 0 .04.001.06.003v.026l.431-.003v-4.084h-2.33zm0 5.76v3.333L8.309 24V4.106l2.331.546v13.582h-.002z"/>
    </svg>`,
    color: 'text-gray-600 dark:text-gray-400',
  },
  DOGE: {
    name: 'Dogecoin',
    icon: `<svg viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4">
      <path d="M12.288 7.908h-1.715v3.38h2.697v1.415h-2.697v3.38h1.799c.462 0 3.794.052 3.789-3.933-.005-3.984-3.232-4.242-3.873-4.242zM12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm.472 18.481H8.126V5.519h4.052c.88 0 6.404-.012 6.404 6.532 0 6.544-5.744 6.43-6.11 6.43z"/>
    </svg>`,
    color: 'text-gray-600 dark:text-gray-400',
  },
};

const data = currencyData[currency];
const truncatedAddress = `${address.slice(0, 6)}...${address.slice(-4)}`;
---

<div class="crypto-wallet relative" data-currency={currency} data-address={address}>
  <button
    class={`crypto-button flex items-center space-x-2 px-3 py-1.5 rounded-lg border border-gray-200 dark:border-gray-800 hover:border-gray-300 dark:hover:border-gray-700 transition-all duration-200 ${data.color} hover:text-gray-900 dark:hover:text-gray-100 min-w-0`}
    type="button"
    aria-label={`${data.name} wallet address`}
    title={address}
  >
    <span set:html={data.icon} />
    <span class="address-text text-xs font-mono hidden sm:inline whitespace-nowrap"
      >{truncatedAddress}</span
    >
    <span class="text-xs font-mono sm:hidden">{currency}</span>
    <svg
      class="copy-icon w-3 h-3 opacity-70 hover:opacity-100 transition-opacity"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
      ></path>
    </svg>
  </button>

  <div
    class="qr-popup absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 opacity-0 pointer-events-none transition-all duration-200 z-50 hidden"
  >
    <div
      class="bg-white dark:bg-gray-900 rounded-lg shadow-xl border border-gray-200 dark:border-gray-800 p-4"
    >
      <canvas class="qr-code w-40 h-40 bg-white rounded" data-address={address}></canvas>
      <p
        class="popup-address text-xs text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 mt-2 text-center font-mono break-all max-w-[160px] cursor-pointer transition-colors"
      >
        {address}
      </p>
    </div>
    <div
      class="absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-transparent border-t-white dark:border-t-gray-900"
    >
    </div>
  </div>

  <div
    class="copy-feedback fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 pointer-events-none transform translate-y-2 transition-all duration-300"
  >
    <div class="flex items-center space-x-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"
        ></path>
      </svg>
      <span class="text-sm font-medium">Copied!</span>
    </div>
  </div>
</div>

<script>
  import QRCode from 'qrcode';

  document.addEventListener('DOMContentLoaded', () => {
    const wallets = document.querySelectorAll('.crypto-wallet');

    // Close all popups when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('.crypto-wallet')) {
        document.querySelectorAll('.qr-popup').forEach((popup) => {
          popup.classList.remove('popup-visible');
          setTimeout(() => {
            popup.classList.add('hidden');
          }, 200);
        });
      }
    });

    wallets.forEach((wallet) => {
      const address = wallet.getAttribute('data-address');
      const button = wallet.querySelector('.crypto-button');
      const qrContainer = wallet.querySelector('.qr-code');
      const feedback = wallet.querySelector('.copy-feedback');

      // Generate QR code
      if (qrContainer && address) {
        QRCode.toCanvas(qrContainer, address, {
          width: 160,
          margin: 1,
          color: {
            dark: '#000000',
            light: '#FFFFFF',
          },
        });
      }

      // Toggle popup on button click
      button?.addEventListener('click', (e) => {
        e.stopPropagation();
        const popup = wallet.querySelector('.qr-popup');

        if (popup?.classList.contains('popup-visible')) {
          // If popup is already visible, copy address instead
          navigator.clipboard
            .writeText(address || '')
            .then(() => {
              // Show feedback
              feedback?.classList.remove('opacity-0', 'pointer-events-none', 'translate-y-2');
              feedback?.classList.add('opacity-100', 'translate-y-0');

              // Hide feedback after 2 seconds
              setTimeout(() => {
                feedback?.classList.add('opacity-0', 'pointer-events-none', 'translate-y-2');
                feedback?.classList.remove('opacity-100', 'translate-y-0');
              }, 2000);
            })
            .catch((err) => {
              console.error('Failed to copy:', err);
            });
        } else {
          // Close other popups first
          document.querySelectorAll('.qr-popup').forEach((otherPopup) => {
            if (otherPopup !== popup) {
              otherPopup.classList.remove('popup-visible');
              setTimeout(() => {
                otherPopup.classList.add('hidden');
              }, 200);
            }
          });

          // Show this popup
          popup?.classList.remove('hidden');
          setTimeout(() => {
            popup?.classList.add('popup-visible');
          }, 10);
        }
      });

      // Add click handler to address text in popup
      const popupAddress = wallet.querySelector('.popup-address');
      popupAddress?.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(address || '');

          // Show feedback
          feedback?.classList.remove('opacity-0', 'pointer-events-none', 'translate-y-2');
          feedback?.classList.add('opacity-100', 'translate-y-0');

          // Hide feedback after 2 seconds
          setTimeout(() => {
            feedback?.classList.add('opacity-0', 'pointer-events-none', 'translate-y-2');
            feedback?.classList.remove('opacity-100', 'translate-y-0');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    });
  });
</script>

<style>
  .crypto-wallet {
    position: relative;
  }

  .qr-popup {
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
  }

  /* Show popup when it has the popup-visible class */
  .qr-popup.popup-visible {
    opacity: 1;
    pointer-events: auto;
    transform: translateX(-50%) translateY(-4px);
  }

  @media (max-width: 640px) {
    .qr-popup {
      left: 50%;
      right: auto;
      transform: translateX(-50%);
    }

    .qr-popup.popup-visible {
      transform: translateX(-50%) translateY(-4px);
    }
  }
</style>
