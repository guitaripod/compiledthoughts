---
export interface Props {
  commands?: Array<{
    prompt?: string;
    command: string;
    output?: string[];
  }>;
  title?: string;
}

const { commands = [], title = 'terminal' } = Astro.props;

// Default demo if no commands provided
const defaultCommands = [
  {
    prompt: '$',
    command: 'brew tap marcusziade/tap',
    output: [],
  },
  {
    prompt: '$',
    command: 'brew install pomme',
    output: ['🍎 Installing Pomme...'],
  },
  {
    prompt: '$',
    command: 'pomme sales',
    output: [
      '📊 Sales Report for December 2024',
      '────────────────────────────────────────────────────────────',
      '',
      '  📦 Total Units: 125,847',
      '  💰 Revenue: $486,392.45',
      '  🌍 Countries: 142 markets',
    ],
  },
];

const demoCommands = commands.length > 0 ? commands : defaultCommands;
---

<div
  class="bg-gray-900 dark:bg-black rounded-lg overflow-hidden shadow-xl border border-gray-700 dark:border-gray-800"
>
  <!-- Terminal header -->
  <div
    class="flex items-center gap-2 px-4 py-2 bg-gray-800 dark:bg-gray-900 border-b border-gray-700 dark:border-gray-800"
  >
    <div class="flex gap-1.5">
      <div class="w-3 h-3 rounded-full bg-red-500"></div>
      <div class="w-3 h-3 rounded-full bg-yellow-500"></div>
      <div class="w-3 h-3 rounded-full bg-green-500"></div>
    </div>
    <span class="text-xs text-gray-400 ml-2 font-mono">{title}</span>
  </div>

  <!-- Terminal content -->
  <div class="p-4 sm:p-6 font-mono text-sm sm:text-base">
    {
      demoCommands.map((cmd, index) => (
        <div class={index < demoCommands.length - 1 ? 'mb-4' : ''}>
          <p class="text-gray-400 mb-2">
            <span class="text-green-400">{cmd.prompt || '$'}</span>{' '}
            <span class="text-white">{cmd.command}</span>
          </p>
          {cmd.output &&
            cmd.output.map((line) => (
              <p
                class={
                  line === ''
                    ? 'mb-2'
                    : line.startsWith('─')
                      ? 'text-gray-400'
                      : 'text-gray-300 text-xs sm:text-sm'
                }
              >
                {line.includes('Total Units') || line.includes('Revenue') ? (
                  <>
                    {line.split(':')[0]}:{' '}
                    <span class="text-green-400 font-bold">{line.split(':')[1]}</span>
                  </>
                ) : line.includes('Countries') ? (
                  <>
                    {line.split(':')[0]}: <span class="text-blue-400">{line.split(':')[1]}</span>
                  </>
                ) : (
                  line
                )}
              </p>
            ))}
        </div>
      ))
    }
  </div>
</div>

<style>
  /* Typewriter effect for last command output */
  @keyframes typewriter {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  /* Optional: Add cursor blink effect */
  @keyframes blink {
    0%,
    50% {
      opacity: 1;
    }
    51%,
    100% {
      opacity: 0;
    }
  }
</style>
