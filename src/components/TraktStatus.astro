---
export interface Props {
  username: string;
  size?: 'normal' | 'large';
}

const { username, size = 'normal' } = Astro.props;
---

<div id="trakt-status" class="space-y-3">
  <div id="trakt-watching" class="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
    <svg class="w-4 h-4 text-red-500" fill="currentColor" viewBox="0 0 24 24">
      <path
        d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"
      ></path>
    </svg>
    <span>Loading...</span>
  </div>

  <div id="trakt-history" class="space-y-2">
    <!-- Watch history will be displayed here -->
  </div>
</div>

<script define:vars={{ username, size }}>
  async function fetchTraktStatus() {
    try {
      console.log('[Trakt] Fetching status for:', username);
      const response = await fetch(`/api/trakt.json?username=${username}`);
      console.log('[Trakt] API response status:', response.status);

      const data = await response.json();
      console.log('[Trakt] API response data:', data);

      const watchingElement = document.getElementById('trakt-watching');
      const historyElement = document.getElementById('trakt-history');

      if (!watchingElement || !historyElement) return;

      if (data.error) {
        watchingElement.innerHTML = `
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
          </svg>
          <span class="text-gray-500">Unable to load status</span>
        `;
        return;
      }

      // Currently watching
      if (data.currentlyWatching && Object.keys(data.currentlyWatching).length > 0) {
        const item = data.currentlyWatching;
        const type = item.type;
        let displayHtml;

        if (type === 'episode') {
          const episodeTitle = item.episode.title || `Episode ${item.episode.number}`;
          displayHtml = `
            <div class="flex items-start gap-3">
              <svg class="w-4 h-4 text-red-500 animate-pulse flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
              </svg>
              <div>
                <div class="text-xs text-red-600 dark:text-red-400 font-medium">Now watching</div>
                <div class="text-sm font-medium text-gray-900 dark:text-gray-100">${item.show.title}</div>
                <div class="text-xs text-gray-600 dark:text-gray-400">S${item.episode.season}E${String(item.episode.number).padStart(2, '0')} - ${episodeTitle}</div>
              </div>
            </div>
          `;
        } else {
          displayHtml = `
            <div class="flex items-start gap-3">
              <svg class="w-4 h-4 text-red-500 animate-pulse flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
              </svg>
              <div>
                <div class="text-xs text-red-600 dark:text-red-400 font-medium">Now watching</div>
                <div class="text-sm font-medium text-gray-900 dark:text-gray-100">${item.movie.title}</div>
                ${item.movie.year ? `<div class="text-xs text-gray-600 dark:text-gray-400">${item.movie.year}</div>` : ''}
              </div>
            </div>
          `;
        }

        watchingElement.innerHTML = displayHtml;
      } else if (data.history && data.history.length > 0) {
        // Not currently watching, show last watched
        const lastWatched = data.history[0];
        const type = lastWatched.type;
        const title = type === 'episode' ? `${lastWatched.show.title}` : lastWatched.movie.title;

        const watchedDate = new Date(lastWatched.watched_at);
        const timeAgo = getTimeAgo(watchedDate);

        watchingElement.innerHTML = `
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
          </svg>
          <span>Last watched: <strong>${title}</strong> Â· ${timeAgo}</span>
        `;
      } else {
        watchingElement.innerHTML = `
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
          </svg>
          <span class="text-gray-500">No recent activity</span>
        `;
      }

      // Recent history (skip first if not currently watching)
      if (data.history && data.history.length > 1) {
        const skipFirst =
          !data.currentlyWatching || Object.keys(data.currentlyWatching).length === 0;
        const recentItems = skipFirst ? data.history.slice(1, 4) : data.history.slice(0, 3);

        if (recentItems.length > 0) {
          const historyHtml = recentItems
            .map((item) => {
              const type = item.type;
              let title, subtitle;

              if (type === 'episode') {
                title = item.show.title;
                subtitle = `S${item.episode.season}E${String(item.episode.number).padStart(2, '0')} - ${item.episode.title || 'Episode ' + item.episode.number}`;
              } else {
                title = item.movie.title;
                subtitle = item.movie.year ? `(${item.movie.year})` : '';
              }

              const typeIcon = type === 'episode' ? 'ðŸ“º' : 'ðŸŽ¬';

              // Note: Trakt API doesn't provide episode/show images directly
              // To add images, we'd need to integrate with TMDB API (requires additional API key)
              // Example: https://api.themoviedb.org/3/search/tv?api_key=YOUR_KEY&query=SHOW_NAME

              return `
              <div class="flex items-start gap-2 py-1.5">
                ${typeIcon}
                <div class="flex-1 min-w-0">
                  <div class="text-xs font-medium text-gray-700 dark:text-gray-300 ${size === 'large' ? '' : 'truncate'}">${title}</div>
                  ${subtitle ? `<div class="text-xs text-gray-500 dark:text-gray-500 ${size === 'large' ? '' : 'truncate'}">${subtitle}</div>` : ''}
                </div>
              </div>
            `;
            })
            .join('');

          historyElement.innerHTML = `
            <p class="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">Recent:</p>
            ${historyHtml}
          `;
        }
      }
    } catch (error) {
      console.error('Error fetching Trakt.tv data:', error);
      const watchingElement = document.getElementById('trakt-watching');
      if (watchingElement) {
        watchingElement.innerHTML = `
          <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 24 24">
            <path d="M21 3H3c-1.11 0-2 .89-2 2v14c0 1.11.89 2 2 2h18c1.11 0 2-.89 2-2V5c0-1.11-.89-2-2-2zm0 16H3V5h18v14zM9 8l7 4-7 4V8z"/>
          </svg>
          <span class="text-gray-500">Unable to load status</span>
        `;
      }
    }
  }

  function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);

    const intervals = {
      year: 31536000,
      month: 2592000,
      week: 604800,
      day: 86400,
      hour: 3600,
      minute: 60,
    };

    for (const [name, secondsInInterval] of Object.entries(intervals)) {
      const interval = Math.floor(seconds / secondsInInterval);
      if (interval >= 1) {
        return interval === 1 ? `1 ${name} ago` : `${interval} ${name}s ago`;
      }
    }

    return 'just now';
  }

  // Function to initialize Trakt widget with retry
  function initializeTrakt() {
    // Check if element exists
    const watchingElement = document.getElementById('trakt-watching');

    if (!watchingElement) {
      // Retry after a short delay if element isn't ready
      console.log('[Trakt] Element not ready, retrying in 100ms...');
      setTimeout(initializeTrakt, 100);
      return;
    }

    // Element is ready, fetch data
    fetchTraktStatus();
    // Update every minute
    setInterval(fetchTraktStatus, 60000);
  }

  // Ensure DOM is ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTrakt);
  } else {
    // DOM is already ready, but use requestAnimationFrame to ensure rendering is complete
    requestAnimationFrame(initializeTrakt);
  }
</script>
