---
export interface Props {
  username: string;
}

const { username } = Astro.props;
---

<div id="wakatime-stats" class="space-y-3">
  <div class="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
    <svg class="w-4 h-4 text-blue-500" fill="currentColor" viewBox="0 0 24 24">
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
      ></path>
    </svg>
    <span id="wakatime-total" class="font-medium">Loading stats...</span>
  </div>

  <div id="wakatime-languages" class="space-y-2">
    <!-- Languages will be populated here -->
  </div>

  <div id="wakatime-daily" class="text-xs text-gray-500 dark:text-gray-500">
    <!-- Daily average will be shown here -->
  </div>
</div>

<script define:vars={{ username }}>
  async function fetchWakaTimeStats() {
    try {
      console.log('[WakaTime] Fetching stats for:', username);
      const response = await fetch(`/api/wakatime.json?username=${username}`);
      console.log('[WakaTime] API response status:', response.status);

      const data = await response.json();
      console.log('[WakaTime] API response data:', data);

      const totalElement = document.getElementById('wakatime-total');
      const languagesElement = document.getElementById('wakatime-languages');
      const dailyElement = document.getElementById('wakatime-daily');

      if (!totalElement || !languagesElement || !dailyElement) {
        console.error('[WakaTime] DOM elements not found');
        return;
      }

      if (data.error) {
        console.error('[WakaTime] API error:', data.error);
        totalElement.textContent = 'Unable to load stats';
        return;
      }

      if (data.data) {
        // Total time
        const totalSeconds = data.data.total_seconds;
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        totalElement.innerHTML = `<strong>${hours}h ${minutes}m</strong> coded last 7 days`;

        // Top languages
        if (data.data.languages && data.data.languages.length > 0) {
          const topLanguages = data.data.languages.slice(0, 3);
          languagesElement.innerHTML = topLanguages
            .map((lang) => {
              const percentage = lang.percent.toFixed(1);
              return `
              <div class="flex items-center justify-between text-xs">
                <span class="text-gray-600 dark:text-gray-400">${lang.name}</span>
                <div class="flex items-center gap-2">
                  <div class="w-20 bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
                    <div class="bg-blue-500 h-1.5 rounded-full" style="width: ${percentage}%"></div>
                  </div>
                  <span class="text-gray-500 dark:text-gray-500 w-12 text-right">${percentage}%</span>
                </div>
              </div>
            `;
            })
            .join('');
        }

        // Daily average
        const dailyAverage = data.data.daily_average;
        const avgHours = Math.floor(dailyAverage / 3600);
        const avgMinutes = Math.floor((dailyAverage % 3600) / 60);
        dailyElement.textContent = `Daily average: ${avgHours}h ${avgMinutes}m`;
      }
    } catch (error) {
      console.error('Error fetching WakaTime data:', error);
      const totalElement = document.getElementById('wakatime-total');
      if (totalElement) {
        totalElement.textContent = 'Unable to load stats';
      }
    }
  }

  // Fetch immediately
  fetchWakaTimeStats();

  // Update every 5 minutes
  setInterval(fetchWakaTimeStats, 300000);
</script>
