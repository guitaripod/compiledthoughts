---
export interface Props {
  code: string;
  lang?: string;
  filename?: string;
  highlights?: number[];
  collapsible?: boolean;
  initialLines?: number;
}

const { code, lang, filename, highlights = [], collapsible = true, initialLines = 5 } = Astro.props;
const codeId = `code-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="code-block relative group my-6" data-collapsible={collapsible} data-initial-lines={initialLines} data-code-id={codeId}>
  {filename && (
    <div class="filename px-4 py-2 bg-gray-800 dark:bg-gray-900 text-gray-300 text-sm rounded-t-lg border-b border-gray-700">
      {filename}
    </div>
  )}
  <div class="code-wrapper relative">
    <pre class={`language-${lang || 'text'} ${filename ? 'rounded-t-none' : ''} ${collapsible ? 'collapsible-pre' : ''}`} data-code-id={codeId}>
      <code class={`language-${lang || 'text'}`} data-highlights={highlights.join(',')}>
        {code}
      </code>
    </pre>
    {collapsible && (
      <div class="expand-collapse-wrapper absolute bottom-0 left-0 right-0 pointer-events-none" data-code-id={codeId}>
        <div class="shadow-fade"></div>
        <button
          class="expand-button pointer-events-auto"
          aria-label="Expand code"
          data-code-id={codeId}
        >
          <svg class="expand-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
          <span class="expand-text">Show more</span>
        </button>
      </div>
    )}
    <button
      class="copy-button opacity-0 group-hover:opacity-100 transition-opacity"
      data-code={code}
      aria-label="Copy code"
    >
      <span class="copy-text">Copy</span>
    </button>
  </div>
</div>

<style>
  .filename {
    font-family: ui-monospace, SFMono-Regular, "SF Mono", Consolas, "Liberation Mono", Menlo, monospace;
  }

  .code-wrapper {
    position: relative;
  }

  .collapsible-pre {
    max-height: var(--max-height, 200px);
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }

  .collapsible-pre.expanded {
    max-height: none;
  }

  .expand-collapse-wrapper {
    opacity: 1;
    transition: opacity 0.3s ease;
  }

  .expand-collapse-wrapper.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .shadow-fade {
    position: absolute;
    bottom: 40px;
    left: 0;
    right: 0;
    height: 80px;
    background: linear-gradient(to bottom, transparent, rgba(31, 41, 55, 0.95));
    pointer-events: none;
  }

  :global(.dark) .shadow-fade {
    background: linear-gradient(to bottom, transparent, rgba(17, 24, 39, 0.95));
  }

  .expand-button {
    position: absolute;
    bottom: 8px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 6px 16px;
    background: rgba(59, 130, 246, 0.9);
    color: white;
    border-radius: 9999px;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    backdrop-filter: blur(4px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .expand-button:hover {
    background: rgba(59, 130, 246, 1);
    transform: translateX(-50%) translateY(-2px);
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.4);
  }

  .expand-icon {
    transition: transform 0.3s ease;
  }

  .expand-button.collapse .expand-icon {
    transform: rotate(180deg);
  }

  .collapse-cta {
    position: sticky;
    bottom: 16px;
    display: flex;
    justify-content: center;
    margin-top: -32px;
    margin-bottom: 16px;
    z-index: 10;
  }

  .collapse-button {
    display: flex;
    align-items: center;
    gap: 6px;
    padding: 8px 20px;
    background: rgba(156, 163, 175, 0.9);
    color: rgba(17, 24, 39, 0.9);
    border-radius: 9999px;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
    backdrop-filter: blur(4px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .collapse-button {
    background: rgba(75, 85, 99, 0.9);
    color: rgba(243, 244, 246, 0.9);
  }

  .collapse-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
  }

  :global(.dark) .collapse-button:hover {
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
  }
</style>

<script>
  function initCodeBlocks() {
    const copyButtons = document.querySelectorAll('.copy-button');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const code = button.getAttribute('data-code');
        const copyText = button.querySelector('.copy-text');
        
        try {
          await navigator.clipboard.writeText(code);
          copyText.textContent = 'Copied!';
          button.classList.add('copied');
          
          setTimeout(() => {
            copyText.textContent = 'Copy';
            button.classList.remove('copied');
          }, 2000);
        } catch (err) {
          console.error('Failed to copy:', err);
        }
      });
    });
    
    // Apply line highlights
    const codeBlocks = document.querySelectorAll('code[data-highlights]');
    codeBlocks.forEach(block => {
      const highlights = block.getAttribute('data-highlights').split(',').map(Number);
      if (highlights.length === 0 || highlights[0] === 0) return;
      
      const lines = block.innerHTML.split('\n');
      const highlightedLines = lines.map((line, index) => {
        const lineNumber = index + 1;
        if (highlights.includes(lineNumber)) {
          return `<span class="highlight-line">${line}</span>`;
        }
        return line;
      });
      
      block.innerHTML = highlightedLines.join('\n');
    });

    // Initialize collapsible code blocks
    const collapsibleBlocks = document.querySelectorAll('.code-block[data-collapsible="true"]');
    
    collapsibleBlocks.forEach(block => {
      const codeId = block.getAttribute('data-code-id');
      const initialLines = parseInt(block.getAttribute('data-initial-lines')) || 5;
      const pre = block.querySelector(`pre[data-code-id="${codeId}"]`);
      const expandWrapper = block.querySelector(`.expand-collapse-wrapper[data-code-id="${codeId}"]`);
      const expandButton = block.querySelector(`.expand-button[data-code-id="${codeId}"]`);
      
      if (!pre || !expandWrapper || !expandButton) return;
      
      // Calculate height based on lines
      const code = pre.querySelector('code');
      const lineHeight = parseFloat(window.getComputedStyle(code).lineHeight);
      const padding = parseFloat(window.getComputedStyle(pre).paddingTop) + parseFloat(window.getComputedStyle(pre).paddingBottom);
      const maxHeight = (lineHeight * initialLines) + padding;
      
      // Check if content needs collapsing
      const totalHeight = pre.scrollHeight;
      if (totalHeight <= maxHeight + 20) {
        // Content is short enough, hide expand button
        expandWrapper.classList.add('hidden');
        return;
      }
      
      // Set initial collapsed height
      pre.style.setProperty('--max-height', `${maxHeight}px`);
      
      // Add collapse CTA after the code block
      const collapseCta = document.createElement('div');
      collapseCta.className = 'collapse-cta';
      collapseCta.style.display = 'none';
      collapseCta.innerHTML = `
        <button class="collapse-button" data-code-id="${codeId}">
          <svg class="collapse-icon" width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4 4a1 1 0 001.414 0l4-4a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          <span>Collapse</span>
        </button>
      `;
      block.parentNode.insertBefore(collapseCta, block.nextSibling);
      
      const collapseButton = collapseCta.querySelector('.collapse-button');
      
      // Expand functionality
      expandButton.addEventListener('click', () => {
        pre.classList.add('expanded');
        expandWrapper.classList.add('hidden');
        collapseCta.style.display = 'flex';
        
        // Smooth scroll to show expanded code
        setTimeout(() => {
          const rect = pre.getBoundingClientRect();
          if (rect.top < 0) {
            window.scrollBy({
              top: rect.top - 20,
              behavior: 'smooth'
            });
          }
        }, 100);
      });
      
      // Collapse functionality
      collapseButton.addEventListener('click', () => {
        pre.classList.remove('expanded');
        expandWrapper.classList.remove('hidden');
        collapseCta.style.display = 'none';
        
        // Scroll to code block if it's above viewport
        const rect = block.getBoundingClientRect();
        if (rect.top < 0) {
          block.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
  }
  
  document.addEventListener('DOMContentLoaded', initCodeBlocks);
  document.addEventListener('astro:after-swap', initCodeBlocks);
</script>

<style is:global>
  .highlight-line {
    display: inline-block;
    width: 100%;
    background-color: rgba(59, 130, 246, 0.1);
    border-left: 3px solid rgb(59, 130, 246);
    padding-left: 0.5rem;
    margin-left: -0.5rem;
  }
  
  .dark .highlight-line {
    background-color: rgba(59, 130, 246, 0.2);
  }
</style>