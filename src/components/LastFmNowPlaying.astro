---
export interface Props {
  username: string;
  showArtwork?: boolean;
  size?: 'normal' | 'large';
}

const { username, showArtwork = true, size = 'normal' } = Astro.props;
---

<div id="lastfm-now-playing">
  <div id="lastfm-content" class="flex items-start gap-3">
    <div id="album-art" class="hidden flex-shrink-0">
      <!-- Album artwork will be inserted here -->
    </div>
    <div class="flex-1 min-w-0">
      <div class="flex items-start justify-between gap-4">
        <!-- Left side: Current track info -->
        <div class="flex-1 min-w-0 space-y-1">
          <div class="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
            <svg
              class="w-4 h-4 animate-pulse text-green-500 flex-shrink-0"
              fill="currentColor"
              viewBox="0 0 24 24"
            >
              <circle cx="12" cy="12" r="3"></circle>
              <path
                d="M12 6a6 6 0 0 0-6 6c0 1.66.67 3.16 1.76 4.24l1.42-1.42A4 4 0 0 1 8 12a4 4 0 0 1 4-4V6z"
                opacity="0.6"></path>
              <path
                d="M12 2a10 10 0 0 0-10 10c0 2.76 1.12 5.26 2.93 7.07l1.42-1.42A8 8 0 0 1 4 12a8 8 0 0 1 8-8V2z"
                opacity="0.3"></path>
            </svg>
            <span id="track-info" class="italic">Loading...</span>
          </div>
          <div id="track-details" class="hidden">
            <!-- Current track details -->
          </div>
        </div>

        <!-- Right side: Stats and recent info -->
        <div id="side-stats" class="hidden flex-shrink-0 text-right space-y-1">
          <!-- Stats will be inserted here -->
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ username, showArtwork, size }}>
  async function fetchNowPlaying() {
    try {
      const url = `/api/lastfm.json?username=${username}`;
      const response = await fetch(url);
      const data = await response.json();

      const trackElement = document.getElementById('track-info');
      const albumArtElement = document.getElementById('album-art');
      const trackDetailsElement = document.getElementById('track-details');
      const sideStatsElement = document.getElementById('side-stats');

      if (!trackElement) return;

      if (data.error) {
        trackElement.textContent = 'API error';
        return;
      }

      // Handle recent tracks
      if (data.recenttracks && data.recenttracks.track) {
        const tracks = Array.isArray(data.recenttracks.track)
          ? data.recenttracks.track
          : [data.recenttracks.track];

        if (tracks.length > 0) {
          const track = tracks[0];
          const isNowPlaying = track['@attr'] && track['@attr'].nowplaying === 'true';

          // Show album artwork - small size
          if (showArtwork && albumArtElement && track.image) {
            const imageSize = 'medium';
            const artworkSize = size === 'large' ? 'w-12 h-12' : 'w-10 h-10';

            const selectedImage =
              track.image.find((img) => img.size === imageSize) ||
              track.image.find((img) => img.size === 'large') ||
              track.image[track.image.length - 1];

            if (selectedImage && selectedImage['#text']) {
              albumArtElement.innerHTML = `
                <img 
                  src="${selectedImage['#text']}" 
                  alt="${track.album ? track.album['#text'] : 'Album artwork'}"
                  class="${artworkSize} rounded-md shadow-sm object-cover"
                  loading="lazy"
                />
              `;
              albumArtElement.classList.remove('hidden');
            }
          }

          // Status line
          if (isNowPlaying) {
            trackElement.innerHTML = `<span class="text-green-600 dark:text-green-400">Now playing</span>`;
          } else {
            const date = track.date ? new Date(track.date.uts * 1000) : null;
            const timeAgo = date ? getTimeAgo(date) : '';
            trackElement.innerHTML = `<span class="text-gray-500">Last played · ${timeAgo}</span>`;
          }

          // Current track details
          if (trackDetailsElement) {
            const titleSize = size === 'large' ? 'text-sm' : 'text-xs';
            trackDetailsElement.innerHTML = `
              <div class="${titleSize} font-medium text-gray-900 dark:text-gray-100 truncate">${track.name}</div>
              <div class="text-xs text-gray-600 dark:text-gray-400 truncate">${track.artist['#text']} · ${track.album?.['#text'] || 'Unknown Album'}</div>
            `;
            trackDetailsElement.classList.remove('hidden');
          }

          // Right side stats - compact format
          if (sideStatsElement && size === 'large') {
            let statsHtml = '';

            // User stats
            if (data.user) {
              const playcount = parseInt(data.user.playcount || '0').toLocaleString();
              const registeredDate = new Date(
                parseInt(data.user.registered?.unixtime || '0') * 1000
              );
              const memberYears = new Date().getFullYear() - registeredDate.getFullYear();
              statsHtml += `<div class="text-xs text-gray-500 dark:text-gray-400">${playcount} plays</div>`;
              statsHtml += `<div class="text-xs text-gray-500 dark:text-gray-400">${memberYears}y member</div>`;
            }

            // Recent tracks - just artist names
            if (tracks.length > 1) {
              const recentArtists = [
                ...new Set(tracks.slice(1, 4).map((t) => t.artist['#text'])),
              ].slice(0, 2);
              statsHtml += `<div class="text-xs text-gray-500 dark:text-gray-400 mt-1">Recent: ${recentArtists.join(', ')}</div>`;
            }

            // Top artist this week
            if (data.topartists && data.topartists.artist) {
              const topArtist = Array.isArray(data.topartists.artist)
                ? data.topartists.artist[0]
                : data.topartists.artist;

              if (topArtist) {
                statsHtml += `<div class="text-xs text-gray-500 dark:text-gray-400">Top: ${topArtist.name}</div>`;
              }
            }

            if (statsHtml) {
              sideStatsElement.innerHTML = statsHtml;
              sideStatsElement.classList.remove('hidden');
            }
          }
        } else {
          trackElement.textContent = 'No recent tracks';
        }
      } else {
        trackElement.textContent = 'No recent tracks';
      }
    } catch (error) {
      console.error('Error fetching Last.fm data:', error);
      const trackElement = document.getElementById('track-info');
      if (trackElement) {
        trackElement.textContent = 'Unable to load track info';
      }
    }
  }

  function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);

    const intervals = {
      year: 31536000,
      month: 2592000,
      week: 604800,
      day: 86400,
      hour: 3600,
      minute: 60,
    };

    for (const [name, secondsInInterval] of Object.entries(intervals)) {
      const interval = Math.floor(seconds / secondsInInterval);
      if (interval >= 1) {
        return interval === 1 ? `1 ${name} ago` : `${interval} ${name}s ago`;
      }
    }

    return 'just now';
  }

  // Function to initialize Last.fm widget with retry
  function initializeLastFm() {
    const trackElement = document.getElementById('track-info');

    if (!trackElement) {
      setTimeout(initializeLastFm, 100);
      return;
    }

    fetchNowPlaying();
    setInterval(fetchNowPlaying, 10000);
  }

  // Ensure DOM is ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeLastFm);
  } else {
    requestAnimationFrame(initializeLastFm);
  }
</script>
