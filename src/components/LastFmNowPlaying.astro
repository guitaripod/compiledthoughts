---
export interface Props {
  username: string;
}

const { username } = Astro.props;
---

<div id="lastfm-now-playing" class="text-xs text-gray-600 dark:text-gray-400">
  <div class="flex items-center gap-2">
    <svg class="w-4 h-4 animate-pulse text-green-500" fill="currentColor" viewBox="0 0 24 24">
      <circle cx="12" cy="12" r="3"></circle>
      <path
        d="M12 6a6 6 0 0 0-6 6c0 1.66.67 3.16 1.76 4.24l1.42-1.42A4 4 0 0 1 8 12a4 4 0 0 1 4-4V6z"
        opacity="0.6"></path>
      <path
        d="M12 2a10 10 0 0 0-10 10c0 2.76 1.12 5.26 2.93 7.07l1.42-1.42A8 8 0 0 1 4 12a8 8 0 0 1 8-8V2z"
        opacity="0.3"></path>
    </svg>
    <span id="track-info" class="italic">Loading...</span>
  </div>
</div>

<script define:vars={{ username }}>
  async function fetchNowPlaying() {
    try {
      console.log('Fetching Last.fm data for:', username);

      const url = `/api/lastfm.json?username=${username}`;
      console.log('Fetching from API endpoint:', url);

      const response = await fetch(url);
      console.log('Response status:', response.status);

      const data = await response.json();
      console.log('Last.fm API response:', data);

      const trackElement = document.getElementById('track-info');
      if (!trackElement) return;

      if (data.error) {
        console.error('Last.fm API error:', data.message);
        trackElement.textContent = 'API error';
        return;
      }

      if (data.recenttracks && data.recenttracks.track) {
        // Handle both array and single object response
        const tracks = Array.isArray(data.recenttracks.track)
          ? data.recenttracks.track
          : [data.recenttracks.track];

        if (tracks.length > 0) {
          const track = tracks[0];
          const isNowPlaying = track['@attr'] && track['@attr'].nowplaying === 'true';

          console.log('Track found:', track.name, 'by', track.artist['#text']);
          console.log('Now playing:', isNowPlaying);

          if (isNowPlaying) {
            trackElement.innerHTML = `Now playing: <strong>${track.name}</strong> by ${track.artist['#text']}`;
          } else {
            // Show last played track with timestamp
            const date = track.date ? new Date(track.date.uts * 1000) : null;
            const timeAgo = date ? getTimeAgo(date) : '';
            trackElement.innerHTML = `Last played: <strong>${track.name}</strong> by ${track.artist['#text']}${timeAgo ? ' Â· ' + timeAgo : ''}`;
          }
        } else {
          trackElement.textContent = 'No recent tracks';
        }
      } else {
        trackElement.textContent = 'No recent tracks';
      }
    } catch (error) {
      console.error('Error fetching Last.fm data:', error);
      const trackElement = document.getElementById('track-info');
      if (trackElement) {
        trackElement.textContent = 'Unable to load track info';
      }
    }
  }

  function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);

    const intervals = {
      year: 31536000,
      month: 2592000,
      week: 604800,
      day: 86400,
      hour: 3600,
      minute: 60,
    };

    for (const [name, secondsInInterval] of Object.entries(intervals)) {
      const interval = Math.floor(seconds / secondsInInterval);
      if (interval >= 1) {
        return interval === 1 ? `1 ${name} ago` : `${interval} ${name}s ago`;
      }
    }

    return 'just now';
  }

  // Fetch immediately
  fetchNowPlaying();

  // Update every 10 seconds for better real-time updates
  setInterval(fetchNowPlaying, 10000);
</script>
