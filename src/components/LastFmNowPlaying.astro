---
export interface Props {
  username: string;
  showArtwork?: boolean;
  size?: 'normal' | 'large';
}

const { username, showArtwork = true, size = 'normal' } = Astro.props;
---

<div id="lastfm-now-playing" class="space-y-3">
  <div id="lastfm-content" class="flex items-start gap-3">
    <div id="album-art" class="hidden flex-shrink-0">
      <!-- Album artwork will be inserted here -->
    </div>
    <div class="flex-1 min-w-0">
      <div class="flex items-center gap-2 text-xs text-gray-600 dark:text-gray-400">
        <svg
          class="w-4 h-4 animate-pulse text-green-500 flex-shrink-0"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <circle cx="12" cy="12" r="3"></circle>
          <path
            d="M12 6a6 6 0 0 0-6 6c0 1.66.67 3.16 1.76 4.24l1.42-1.42A4 4 0 0 1 8 12a4 4 0 0 1 4-4V6z"
            opacity="0.6"></path>
          <path
            d="M12 2a10 10 0 0 0-10 10c0 2.76 1.12 5.26 2.93 7.07l1.42-1.42A8 8 0 0 1 4 12a8 8 0 0 1 8-8V2z"
            opacity="0.3"></path>
        </svg>
        <span id="track-info" class="italic">Loading...</span>
      </div>
      <div id="track-details" class="mt-1 space-y-0.5 hidden">
        <!-- Additional track details will be shown here -->
      </div>
    </div>
  </div>
</div>

<script define:vars={{ username, showArtwork, size }}>
  async function fetchNowPlaying() {
    try {
      console.log('Fetching Last.fm data for:', username);

      const url = `/api/lastfm.json?username=${username}`;
      console.log('Fetching from API endpoint:', url);

      const response = await fetch(url);
      console.log('Response status:', response.status);

      const data = await response.json();
      console.log('Last.fm API response:', data);

      const trackElement = document.getElementById('track-info');
      const albumArtElement = document.getElementById('album-art');
      const trackDetailsElement = document.getElementById('track-details');

      if (!trackElement) return;

      if (data.error) {
        console.error('Last.fm API error:', data.message);
        trackElement.textContent = 'API error';
        return;
      }

      if (data.recenttracks && data.recenttracks.track) {
        // Handle both array and single object response
        const tracks = Array.isArray(data.recenttracks.track)
          ? data.recenttracks.track
          : [data.recenttracks.track];

        if (tracks.length > 0) {
          const track = tracks[0];
          const isNowPlaying = track['@attr'] && track['@attr'].nowplaying === 'true';

          console.log('Track found:', track.name, 'by', track.artist['#text']);
          console.log('Now playing:', isNowPlaying);
          console.log('Track @attr:', track['@attr']);

          // Show album artwork if available
          if (showArtwork && albumArtElement && track.image) {
            const imageSize = size === 'large' ? 'extralarge' : 'large';
            const artworkSize = size === 'large' ? 'w-24 h-24' : 'w-16 h-16';

            const selectedImage =
              track.image.find((img) => img.size === imageSize) ||
              track.image.find((img) => img.size === 'large') ||
              track.image[track.image.length - 1];

            if (selectedImage && selectedImage['#text']) {
              albumArtElement.innerHTML = `
                <img 
                  src="${selectedImage['#text']}" 
                  alt="${track.album ? track.album['#text'] : 'Album artwork'}"
                  class="${artworkSize} rounded-md shadow-sm object-cover"
                  loading="lazy"
                />
              `;
              albumArtElement.classList.remove('hidden');
            }
          }

          if (isNowPlaying) {
            trackElement.innerHTML = `<span class="text-green-600 dark:text-green-400">Now playing</span>`;
          } else {
            // Show last played track with timestamp
            const date = track.date ? new Date(track.date.uts * 1000) : null;
            const timeAgo = date ? getTimeAgo(date) : '';
            trackElement.innerHTML = `<span class="text-gray-500">Last played${timeAgo ? ' Â· ' + timeAgo : ''}</span>`;
          }

          // Show track details
          if (trackDetailsElement) {
            const truncateClass = size === 'large' ? '' : 'truncate';
            const titleSize = size === 'large' ? 'text-base' : 'text-sm';
            const artistSize = size === 'large' ? 'text-sm' : 'text-xs';

            trackDetailsElement.innerHTML = `
              <div class="${titleSize} font-medium text-gray-900 dark:text-gray-100 ${truncateClass}">${track.name}</div>
              <div class="${artistSize} text-gray-600 dark:text-gray-400 ${truncateClass}">${track.artist['#text']}</div>
              ${track.album && track.album['#text'] ? `<div class="${artistSize} text-gray-500 dark:text-gray-500 ${truncateClass}">${track.album['#text']}</div>` : ''}
            `;
            trackDetailsElement.classList.remove('hidden');
          }
        } else {
          trackElement.textContent = 'No recent tracks';
        }
      } else {
        trackElement.textContent = 'No recent tracks';
      }
    } catch (error) {
      console.error('Error fetching Last.fm data:', error);
      const trackElement = document.getElementById('track-info');
      if (trackElement) {
        trackElement.textContent = 'Unable to load track info';
      }
    }
  }

  function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);

    const intervals = {
      year: 31536000,
      month: 2592000,
      week: 604800,
      day: 86400,
      hour: 3600,
      minute: 60,
    };

    for (const [name, secondsInInterval] of Object.entries(intervals)) {
      const interval = Math.floor(seconds / secondsInInterval);
      if (interval >= 1) {
        return interval === 1 ? `1 ${name} ago` : `${interval} ${name}s ago`;
      }
    }

    return 'just now';
  }

  // Fetch immediately
  fetchNowPlaying();

  // Update every 10 seconds for better real-time updates
  setInterval(fetchNowPlaying, 10000);
</script>
