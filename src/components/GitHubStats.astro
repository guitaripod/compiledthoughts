---
export interface Props {
  username: string;
}

const { username } = Astro.props;
---

<div id="github-stats" class="space-y-3">
  <div class="text-xs text-gray-600 dark:text-gray-400">
    <span class="italic">Loading GitHub stats...</span>
  </div>
</div>

<script define:vars={{ username }}>
  async function fetchGitHubStats() {
    try {
      console.log('[GitHub] Fetching stats for:', username);

      // Use our API endpoint which handles rate limiting better
      const response = await fetch(`/api/github.json?username=${username}`);
      console.log('[GitHub] API response status:', response.status);

      const statsElement = document.getElementById('github-stats');
      if (!statsElement) return;

      if (!response.ok) {
        console.error('[GitHub] Failed to fetch data');
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
        return;
      }

      const data = await response.json();

      if (data.error) {
        console.error('[GitHub] API error:', data.error);
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
        return;
      }

      const userData = data.user;
      const recentRepos = data.repos || [];

      console.log('[GitHub] User data:', userData);
      console.log('[GitHub] Recent repos:', recentRepos.length);

      // Calculate account age
      const createdDate = new Date(userData.created_at);
      const accountAge = Math.floor(
        (Date.now() - createdDate.getTime()) / (1000 * 60 * 60 * 24 * 365)
      );

      // Calculate total stars from recent repos
      const totalStars = recentRepos.reduce((sum, repo) => sum + repo.stargazers_count, 0);

      let html = `
        <div class="space-y-3">
          <!-- Primary stats above divider -->
          <div class="flex items-center gap-4 text-xs text-gray-600 dark:text-gray-400">
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.166 6.839 9.489.5.092.682-.217.682-.482 0-.237-.009-.866-.013-1.7-2.782.604-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.463-1.11-1.463-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.831.092-.646.35-1.086.636-1.336-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.163 22 16.418 22 12c0-5.523-4.477-10-10-10z" />
              </svg>
              <strong>${userData.public_repos}</strong> repos
            </div>
            <div class="flex items-center gap-1">
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" />
              </svg>
              <strong>${userData.followers}</strong> followers
            </div>
          </div>
          
          <!-- Divider -->
          <div class="border-t border-gray-200 dark:border-gray-700"></div>
          
          <!-- Secondary stats below divider -->
          <div class="space-y-3">
            ${
              userData.bio
                ? `
            <div class="text-xs text-gray-500 dark:text-gray-500 italic">
              "${userData.bio}"
            </div>
            `
                : ''
            }
            <div class="grid grid-cols-2 gap-x-4 gap-y-2 text-xs">
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" />
                </svg>
                <span>${userData.followers} followers</span>
              </div>
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clip-rule="evenodd"/>
                  <path d="M2 13.692V16a2 2 0 002 2h12a2 2 0 002-2v-2.308A24.974 24.974 0 0110 15c-2.796 0-5.487-.46-8-1.308z"/>
                </svg>
                <span>${accountAge}+ years</span>
              </div>
              ${
                userData.company
                  ? `
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd"/>
                </svg>
                <span>${userData.company}</span>
              </div>
              `
                  : ''
              }
              ${
                userData.location
                  ? `
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
                </svg>
                <span>${userData.location}</span>
              </div>
              `
                  : ''
              }
              ${
                userData.public_gists > 0
                  ? `
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"/>
                  <path fill-rule="evenodd" d="M4 5a2 2 0 012-2 1 1 0 000 2H6a2 2 0 00-2 2v6a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-1a1 1 0 100-2h1a4 4 0 014 4v8a4 4 0 01-4 4H6a4 4 0 01-4-4V7a4 4 0 014-4z" clip-rule="evenodd"/>
                </svg>
                <span>${userData.public_gists} gists</span>
              </div>
              `
                  : ''
              }
              <div class="flex items-center gap-1 text-gray-500 dark:text-gray-500">
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd"/>
                </svg>
                <span>${userData.following || 0} following</span>
              </div>
            </div>
          </div>
        </div>
      `;

      if (recentRepos.length > 0) {
        html += `
          <div class="space-y-1.5">
            <p class="text-xs font-medium text-gray-700 dark:text-gray-300">Recent activity:</p>
            <div class="grid gap-1">
        `;

        recentRepos.forEach((repo) => {
          const pushedAt = new Date(repo.pushed_at);
          const daysAgo = Math.floor((Date.now() - pushedAt.getTime()) / (1000 * 60 * 60 * 24));
          const timeStr = daysAgo === 0 ? 'today' : daysAgo === 1 ? 'yesterday' : `${daysAgo}d ago`;

          // Language color mapping (simplified)
          const langColors = {
            TypeScript: '#3178c6',
            JavaScript: '#f1e05a',
            Go: '#00ADD8',
            Python: '#3572A5',
            Swift: '#FA7343',
            Rust: '#dea584',
            Ruby: '#701516',
            Java: '#b07219',
            'C++': '#f34b7d',
            Astro: '#ff5a03',
          };

          const langColor = langColors[repo.language] || '#6b7280';

          html += `
            <div class="flex items-center justify-between text-xs py-1">
              <div class="flex items-center gap-2 truncate flex-1 mr-2">
                <span class="text-gray-600 dark:text-gray-400 truncate">
                  ${repo.name}
                </span>
                <span class="text-gray-400 dark:text-gray-500 text-[10px]">${timeStr}</span>
              </div>
              <div class="flex items-center gap-2 flex-shrink-0">
                ${
                  repo.language
                    ? `
                <div class="flex items-center gap-1">
                  <span class="w-2 h-2 rounded-full" style="background-color: ${langColor}"></span>
                  <span class="text-gray-500 dark:text-gray-500 text-[10px]">${repo.language}</span>
                </div>
                `
                    : ''
                }
                ${
                  repo.stargazers_count > 0
                    ? `
                <div class="flex items-center gap-0.5 text-gray-500">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                  </svg>
                  <span class="text-[10px]">${repo.stargazers_count}</span>
                </div>
                `
                    : ''
                }
              </div>
            </div>
          `;
        });

        html += '</div></div>';
      }

      statsElement.innerHTML = html;
    } catch (error) {
      console.error('[GitHub] Error fetching stats:', error);
      const statsElement = document.getElementById('github-stats');
      if (statsElement) {
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
      }
    }
  }

  // Function to initialize GitHub stats with retry
  function initializeGitHubStats() {
    // Check if element exists
    const statsElement = document.getElementById('github-stats');

    if (!statsElement) {
      // Retry after a short delay if element isn't ready
      console.log('[GitHub] Element not ready, retrying in 100ms...');
      setTimeout(initializeGitHubStats, 100);
      return;
    }

    // Element is ready, fetch stats
    fetchGitHubStats();
    // Update every 5 minutes
    setInterval(fetchGitHubStats, 300000);
  }

  // Ensure DOM is ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGitHubStats);
  } else {
    // DOM is already ready, but use requestAnimationFrame to ensure rendering is complete
    requestAnimationFrame(initializeGitHubStats);
  }
</script>
