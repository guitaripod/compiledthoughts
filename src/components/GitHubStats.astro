---
export interface Props {
  username: string;
}

const { username } = Astro.props;
---

<div id="github-stats" class="space-y-3">
  <div class="text-xs text-gray-600 dark:text-gray-400">
    <span class="italic">Loading GitHub stats...</span>
  </div>
</div>

<script define:vars={{ username }}>
  async function fetchGitHubStats() {
    try {
      console.log('[GitHub] Fetching stats for:', username);

      // Use our API endpoint which handles rate limiting better
      const response = await fetch(`/api/github.json?username=${username}`);
      console.log('[GitHub] API response status:', response.status);

      const statsElement = document.getElementById('github-stats');
      if (!statsElement) return;

      if (!response.ok) {
        console.error('[GitHub] Failed to fetch data');
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
        return;
      }

      const data = await response.json();

      if (data.error) {
        console.error('[GitHub] API error:', data.error);
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
        return;
      }

      const userData = data.user;
      const recentRepos = data.repos || [];

      console.log('[GitHub] User data:', userData);
      console.log('[GitHub] Recent repos:', recentRepos.length);

      let html = `
        <div class="flex items-center gap-4 text-xs text-gray-600 dark:text-gray-400">
          <div class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.166 6.839 9.489.5.092.682-.217.682-.482 0-.237-.009-.866-.013-1.7-2.782.604-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.463-1.11-1.463-.908-.62.069-.608.069-.608 1.003.07 1.531 1.03 1.531 1.03.892 1.529 2.341 1.087 2.91.831.092-.646.35-1.086.636-1.336-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.269 2.75 1.025A9.578 9.578 0 0112 6.836c.85.004 1.705.114 2.504.336 1.909-1.294 2.747-1.025 2.747-1.025.546 1.377.203 2.394.1 2.647.64.699 1.028 1.592 1.028 2.683 0 3.842-2.339 4.687-4.566 4.935.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48C19.138 20.163 22 16.418 22 12c0-5.523-4.477-10-10-10z" />
            </svg>
            <strong>${userData.public_repos}</strong> repos
          </div>
          <div class="flex items-center gap-1">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z" />
            </svg>
            <strong>${userData.followers}</strong> followers
          </div>
        </div>
      `;

      if (recentRepos.length > 0) {
        html += `
          <div class="space-y-2">
            <p class="text-xs font-medium text-gray-700 dark:text-gray-300">Recent activity:</p>
        `;

        recentRepos.forEach((repo) => {
          html += `
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-600 dark:text-gray-400 truncate flex-1 mr-2">
                ${repo.name}
              </span>
              <div class="flex items-center gap-3 flex-shrink-0">
                ${repo.language ? `<span class="text-gray-500 dark:text-gray-500">${repo.language}</span>` : ''}
                <div class="flex items-center gap-1 text-gray-500">
                  <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                  </svg>
                  ${repo.stargazers_count}
                </div>
              </div>
            </div>
          `;
        });

        html += '</div>';
      }

      statsElement.innerHTML = html;
    } catch (error) {
      console.error('[GitHub] Error fetching stats:', error);
      const statsElement = document.getElementById('github-stats');
      if (statsElement) {
        statsElement.innerHTML =
          '<p class="text-xs text-gray-500 dark:text-gray-500">Unable to load GitHub stats</p>';
      }
    }
  }

  // Function to initialize GitHub stats with retry
  function initializeGitHubStats() {
    // Check if element exists
    const statsElement = document.getElementById('github-stats');

    if (!statsElement) {
      // Retry after a short delay if element isn't ready
      console.log('[GitHub] Element not ready, retrying in 100ms...');
      setTimeout(initializeGitHubStats, 100);
      return;
    }

    // Element is ready, fetch stats
    fetchGitHubStats();
    // Update every 5 minutes
    setInterval(fetchGitHubStats, 300000);
  }

  // Ensure DOM is ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGitHubStats);
  } else {
    // DOM is already ready, but use requestAnimationFrame to ensure rendering is complete
    requestAnimationFrame(initializeGitHubStats);
  }
</script>
